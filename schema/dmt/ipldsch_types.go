package schemadmt

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
)

var _ ipld.Node = nil // suppress errors when this dependency is not referenced
// Type is a struct embeding a NodePrototype/Type for every Node implementation in this package.
// One of its major uses is to start the construction of a value.
// You can use it like this:
//
// 		schemadmt.Type.YourTypeName.NewBuilder().BeginMap() //...
//
// and:
//
// 		schemadmt.Type.OtherTypeName.NewBuilder().AssignString("x") // ...
//
var Type typeSlab

type typeSlab struct {
	AnyScalar                                                   _AnyScalar__Prototype
	AnyScalar__Repr                                             _AnyScalar__ReprPrototype
	Bool                                                        _Bool__Prototype
	Bool__Repr                                                  _Bool__ReprPrototype
	Bytes                                                       _Bytes__Prototype
	Bytes__Repr                                                 _Bytes__ReprPrototype
	EnumRepresentation                                          _EnumRepresentation__Prototype
	EnumRepresentation__Repr                                    _EnumRepresentation__ReprPrototype
	EnumRepresentation_Int                                      _EnumRepresentation_Int__Prototype
	EnumRepresentation_Int__Repr                                _EnumRepresentation_Int__ReprPrototype
	EnumRepresentation_String                                   _EnumRepresentation_String__Prototype
	EnumRepresentation_String__Repr                             _EnumRepresentation_String__ReprPrototype
	EnumValue                                                   _EnumValue__Prototype
	EnumValue__Repr                                             _EnumValue__ReprPrototype
	FieldName                                                   _FieldName__Prototype
	FieldName__Repr                                             _FieldName__ReprPrototype
	Float                                                       _Float__Prototype
	Float__Repr                                                 _Float__ReprPrototype
	Int                                                         _Int__Prototype
	Int__Repr                                                   _Int__ReprPrototype
	ListRepresentation                                          _ListRepresentation__Prototype
	ListRepresentation__Repr                                    _ListRepresentation__ReprPrototype
	ListRepresentation_List                                     _ListRepresentation_List__Prototype
	ListRepresentation_List__Repr                               _ListRepresentation_List__ReprPrototype
	List__FieldName                                             _List__FieldName__Prototype
	List__FieldName__Repr                                       _List__FieldName__ReprPrototype
	List__TypeName                                              _List__TypeName__Prototype
	List__TypeName__Repr                                        _List__TypeName__ReprPrototype
	MapRepresentation                                           _MapRepresentation__Prototype
	MapRepresentation__Repr                                     _MapRepresentation__ReprPrototype
	MapRepresentation_Listpairs                                 _MapRepresentation_Listpairs__Prototype
	MapRepresentation_Listpairs__Repr                           _MapRepresentation_Listpairs__ReprPrototype
	MapRepresentation_Map                                       _MapRepresentation_Map__Prototype
	MapRepresentation_Map__Repr                                 _MapRepresentation_Map__ReprPrototype
	MapRepresentation_Stringpairs                               _MapRepresentation_Stringpairs__Prototype
	MapRepresentation_Stringpairs__Repr                         _MapRepresentation_Stringpairs__ReprPrototype
	Map__EnumValue__Unit                                        _Map__EnumValue__Unit__Prototype
	Map__EnumValue__Unit__Repr                                  _Map__EnumValue__Unit__ReprPrototype
	Map__FieldName__StructField                                 _Map__FieldName__StructField__Prototype
	Map__FieldName__StructField__Repr                           _Map__FieldName__StructField__ReprPrototype
	Map__FieldName__StructRepresentation_Map_FieldDetails       _Map__FieldName__StructRepresentation_Map_FieldDetails__Prototype
	Map__FieldName__StructRepresentation_Map_FieldDetails__Repr _Map__FieldName__StructRepresentation_Map_FieldDetails__ReprPrototype
	Map__String__TypeName                                       _Map__String__TypeName__Prototype
	Map__String__TypeName__Repr                                 _Map__String__TypeName__ReprPrototype
	Map__TypeName__Int                                          _Map__TypeName__Int__Prototype
	Map__TypeName__Int__Repr                                    _Map__TypeName__Int__ReprPrototype
	RepresentationKind                                          _RepresentationKind__Prototype
	RepresentationKind__Repr                                    _RepresentationKind__ReprPrototype
	Schema                                                      _Schema__Prototype
	Schema__Repr                                                _Schema__ReprPrototype
	SchemaMap                                                   _SchemaMap__Prototype
	SchemaMap__Repr                                             _SchemaMap__ReprPrototype
	String                                                      _String__Prototype
	String__Repr                                                _String__ReprPrototype
	StructField                                                 _StructField__Prototype
	StructField__Repr                                           _StructField__ReprPrototype
	StructRepresentation                                        _StructRepresentation__Prototype
	StructRepresentation__Repr                                  _StructRepresentation__ReprPrototype
	StructRepresentation_Listpairs                              _StructRepresentation_Listpairs__Prototype
	StructRepresentation_Listpairs__Repr                        _StructRepresentation_Listpairs__ReprPrototype
	StructRepresentation_Map                                    _StructRepresentation_Map__Prototype
	StructRepresentation_Map__Repr                              _StructRepresentation_Map__ReprPrototype
	StructRepresentation_Map_FieldDetails                       _StructRepresentation_Map_FieldDetails__Prototype
	StructRepresentation_Map_FieldDetails__Repr                 _StructRepresentation_Map_FieldDetails__ReprPrototype
	StructRepresentation_Stringjoin                             _StructRepresentation_Stringjoin__Prototype
	StructRepresentation_Stringjoin__Repr                       _StructRepresentation_Stringjoin__ReprPrototype
	StructRepresentation_Stringpairs                            _StructRepresentation_Stringpairs__Prototype
	StructRepresentation_Stringpairs__Repr                      _StructRepresentation_Stringpairs__ReprPrototype
	StructRepresentation_Tuple                                  _StructRepresentation_Tuple__Prototype
	StructRepresentation_Tuple__Repr                            _StructRepresentation_Tuple__ReprPrototype
	TypeBool                                                    _TypeBool__Prototype
	TypeBool__Repr                                              _TypeBool__ReprPrototype
	TypeBytes                                                   _TypeBytes__Prototype
	TypeBytes__Repr                                             _TypeBytes__ReprPrototype
	TypeCopy                                                    _TypeCopy__Prototype
	TypeCopy__Repr                                              _TypeCopy__ReprPrototype
	TypeDefn                                                    _TypeDefn__Prototype
	TypeDefn__Repr                                              _TypeDefn__ReprPrototype
	TypeDefnInline                                              _TypeDefnInline__Prototype
	TypeDefnInline__Repr                                        _TypeDefnInline__ReprPrototype
	TypeEnum                                                    _TypeEnum__Prototype
	TypeEnum__Repr                                              _TypeEnum__ReprPrototype
	TypeFloat                                                   _TypeFloat__Prototype
	TypeFloat__Repr                                             _TypeFloat__ReprPrototype
	TypeInt                                                     _TypeInt__Prototype
	TypeInt__Repr                                               _TypeInt__ReprPrototype
	TypeLink                                                    _TypeLink__Prototype
	TypeLink__Repr                                              _TypeLink__ReprPrototype
	TypeList                                                    _TypeList__Prototype
	TypeList__Repr                                              _TypeList__ReprPrototype
	TypeMap                                                     _TypeMap__Prototype
	TypeMap__Repr                                               _TypeMap__ReprPrototype
	TypeName                                                    _TypeName__Prototype
	TypeName__Repr                                              _TypeName__ReprPrototype
	TypeNameOrInlineDefn                                        _TypeNameOrInlineDefn__Prototype
	TypeNameOrInlineDefn__Repr                                  _TypeNameOrInlineDefn__ReprPrototype
	TypeString                                                  _TypeString__Prototype
	TypeString__Repr                                            _TypeString__ReprPrototype
	TypeStruct                                                  _TypeStruct__Prototype
	TypeStruct__Repr                                            _TypeStruct__ReprPrototype
	TypeUnion                                                   _TypeUnion__Prototype
	TypeUnion__Repr                                             _TypeUnion__ReprPrototype
	UnionRepresentation                                         _UnionRepresentation__Prototype
	UnionRepresentation__Repr                                   _UnionRepresentation__ReprPrototype
	UnionRepresentation_BytePrefix                              _UnionRepresentation_BytePrefix__Prototype
	UnionRepresentation_BytePrefix__Repr                        _UnionRepresentation_BytePrefix__ReprPrototype
	UnionRepresentation_Envelope                                _UnionRepresentation_Envelope__Prototype
	UnionRepresentation_Envelope__Repr                          _UnionRepresentation_Envelope__ReprPrototype
	UnionRepresentation_Inline                                  _UnionRepresentation_Inline__Prototype
	UnionRepresentation_Inline__Repr                            _UnionRepresentation_Inline__ReprPrototype
	UnionRepresentation_Keyed                                   _UnionRepresentation_Keyed__Prototype
	UnionRepresentation_Keyed__Repr                             _UnionRepresentation_Keyed__ReprPrototype
	UnionRepresentation_Kinded                                  _UnionRepresentation_Kinded__Prototype
	UnionRepresentation_Kinded__Repr                            _UnionRepresentation_Kinded__ReprPrototype
	UnionRepresentation_StringPrefix                            _UnionRepresentation_StringPrefix__Prototype
	UnionRepresentation_StringPrefix__Repr                      _UnionRepresentation_StringPrefix__ReprPrototype
	Unit                                                        _Unit__Prototype
	Unit__Repr                                                  _Unit__ReprPrototype
}

// --- type definitions follow ---

// AnyScalar matches the IPLD Schema type "AnyScalar".
// AnyScalar has Union typekind, which means its data model behaviors are that of a map kind.
type AnyScalar = *_AnyScalar
type _AnyScalar struct {
	tag uint
	x1  _Bool
	x2  _String
	x3  _Bytes
	x4  _Int
	x5  _Float
}
type _AnyScalar__iface interface {
	_AnyScalar__member()
}

func (_Bool) _AnyScalar__member()   {}
func (_String) _AnyScalar__member() {}
func (_Bytes) _AnyScalar__member()  {}
func (_Int) _AnyScalar__member()    {}
func (_Float) _AnyScalar__member()  {}

// Bool matches the IPLD Schema type "Bool".  It has bool kind.
type Bool = *_Bool
type _Bool struct{ x bool }

// Bytes matches the IPLD Schema type "Bytes".  It has bytes kind.
type Bytes = *_Bytes
type _Bytes struct{ x []byte }

// EnumRepresentation matches the IPLD Schema type "EnumRepresentation".
// EnumRepresentation has Union typekind, which means its data model behaviors are that of a map kind.
type EnumRepresentation = *_EnumRepresentation
type _EnumRepresentation struct {
	tag uint
	x1  _EnumRepresentation_String
	x2  _EnumRepresentation_Int
}
type _EnumRepresentation__iface interface {
	_EnumRepresentation__member()
}

func (_EnumRepresentation_String) _EnumRepresentation__member() {}
func (_EnumRepresentation_Int) _EnumRepresentation__member()    {}

// EnumRepresentation_Int matches the IPLD Schema type "EnumRepresentation_Int".  It has map kind.
type EnumRepresentation_Int = *_EnumRepresentation_Int
type _EnumRepresentation_Int struct {
	m map[_EnumValue]*_Int
	t []_EnumRepresentation_Int__entry
}
type _EnumRepresentation_Int__entry struct {
	k _EnumValue
	v _Int
}

// EnumRepresentation_String matches the IPLD Schema type "EnumRepresentation_String".  It has map kind.
type EnumRepresentation_String = *_EnumRepresentation_String
type _EnumRepresentation_String struct {
	m map[_EnumValue]*_String
	t []_EnumRepresentation_String__entry
}
type _EnumRepresentation_String__entry struct {
	k _EnumValue
	v _String
}

// EnumValue matches the IPLD Schema type "EnumValue".  It has string kind.
type EnumValue = *_EnumValue
type _EnumValue struct{ x string }

// FieldName matches the IPLD Schema type "FieldName".  It has string kind.
type FieldName = *_FieldName
type _FieldName struct{ x string }

// Float matches the IPLD Schema type "Float".  It has float kind.
type Float = *_Float
type _Float struct{ x float64 }

// Int matches the IPLD Schema type "Int".  It has int kind.
type Int = *_Int
type _Int struct{ x int64 }

// ListRepresentation matches the IPLD Schema type "ListRepresentation".
// ListRepresentation has Union typekind, which means its data model behaviors are that of a map kind.
type ListRepresentation = *_ListRepresentation
type _ListRepresentation struct {
	tag uint
	x1  _ListRepresentation_List
}
type _ListRepresentation__iface interface {
	_ListRepresentation__member()
}

func (_ListRepresentation_List) _ListRepresentation__member() {}

// ListRepresentation_List matches the IPLD Schema type "ListRepresentation_List".  It has Struct type-kind, and may be interrogated like map kind.
type ListRepresentation_List = *_ListRepresentation_List
type _ListRepresentation_List struct {
}

// List__FieldName matches the IPLD Schema type "List__FieldName".  It has list kind.
type List__FieldName = *_List__FieldName
type _List__FieldName struct {
	x []_FieldName
}

// List__TypeName matches the IPLD Schema type "List__TypeName".  It has list kind.
type List__TypeName = *_List__TypeName
type _List__TypeName struct {
	x []_TypeName
}

// MapRepresentation matches the IPLD Schema type "MapRepresentation".
// MapRepresentation has Union typekind, which means its data model behaviors are that of a map kind.
type MapRepresentation = *_MapRepresentation
type _MapRepresentation struct {
	tag uint
	x1  _MapRepresentation_Map
	x2  _MapRepresentation_Stringpairs
	x3  _MapRepresentation_Listpairs
}
type _MapRepresentation__iface interface {
	_MapRepresentation__member()
}

func (_MapRepresentation_Map) _MapRepresentation__member()         {}
func (_MapRepresentation_Stringpairs) _MapRepresentation__member() {}
func (_MapRepresentation_Listpairs) _MapRepresentation__member()   {}

// MapRepresentation_Listpairs matches the IPLD Schema type "MapRepresentation_Listpairs".  It has Struct type-kind, and may be interrogated like map kind.
type MapRepresentation_Listpairs = *_MapRepresentation_Listpairs
type _MapRepresentation_Listpairs struct {
}

// MapRepresentation_Map matches the IPLD Schema type "MapRepresentation_Map".  It has Struct type-kind, and may be interrogated like map kind.
type MapRepresentation_Map = *_MapRepresentation_Map
type _MapRepresentation_Map struct {
}

// MapRepresentation_Stringpairs matches the IPLD Schema type "MapRepresentation_Stringpairs".  It has Struct type-kind, and may be interrogated like map kind.
type MapRepresentation_Stringpairs = *_MapRepresentation_Stringpairs
type _MapRepresentation_Stringpairs struct {
	innerDelim _String
	entryDelim _String
}

// Map__EnumValue__Unit matches the IPLD Schema type "Map__EnumValue__Unit".  It has map kind.
type Map__EnumValue__Unit = *_Map__EnumValue__Unit
type _Map__EnumValue__Unit struct {
	m map[_EnumValue]*_Unit
	t []_Map__EnumValue__Unit__entry
}
type _Map__EnumValue__Unit__entry struct {
	k _EnumValue
	v _Unit
}

// Map__FieldName__StructField matches the IPLD Schema type "Map__FieldName__StructField".  It has map kind.
type Map__FieldName__StructField = *_Map__FieldName__StructField
type _Map__FieldName__StructField struct {
	m map[_FieldName]*_StructField
	t []_Map__FieldName__StructField__entry
}
type _Map__FieldName__StructField__entry struct {
	k _FieldName
	v _StructField
}

// Map__FieldName__StructRepresentation_Map_FieldDetails matches the IPLD Schema type "Map__FieldName__StructRepresentation_Map_FieldDetails".  It has map kind.
type Map__FieldName__StructRepresentation_Map_FieldDetails = *_Map__FieldName__StructRepresentation_Map_FieldDetails
type _Map__FieldName__StructRepresentation_Map_FieldDetails struct {
	m map[_FieldName]*_StructRepresentation_Map_FieldDetails
	t []_Map__FieldName__StructRepresentation_Map_FieldDetails__entry
}
type _Map__FieldName__StructRepresentation_Map_FieldDetails__entry struct {
	k _FieldName
	v _StructRepresentation_Map_FieldDetails
}

// Map__String__TypeName matches the IPLD Schema type "Map__String__TypeName".  It has map kind.
type Map__String__TypeName = *_Map__String__TypeName
type _Map__String__TypeName struct {
	m map[_String]*_TypeName
	t []_Map__String__TypeName__entry
}
type _Map__String__TypeName__entry struct {
	k _String
	v _TypeName
}

// Map__TypeName__Int matches the IPLD Schema type "Map__TypeName__Int".  It has map kind.
type Map__TypeName__Int = *_Map__TypeName__Int
type _Map__TypeName__Int struct {
	m map[_String]*_Int
	t []_Map__TypeName__Int__entry
}
type _Map__TypeName__Int__entry struct {
	k _String
	v _Int
}

// RepresentationKind matches the IPLD Schema type "RepresentationKind".  It has string kind.
type RepresentationKind = *_RepresentationKind
type _RepresentationKind struct{ x string }

// Schema matches the IPLD Schema type "Schema".  It has Struct type-kind, and may be interrogated like map kind.
type Schema = *_Schema
type _Schema struct {
	types _SchemaMap
}

// SchemaMap matches the IPLD Schema type "SchemaMap".  It has map kind.
type SchemaMap = *_SchemaMap
type _SchemaMap struct {
	m map[_TypeName]*_TypeDefn
	t []_SchemaMap__entry
}
type _SchemaMap__entry struct {
	k _TypeName
	v _TypeDefn
}

// String matches the IPLD Schema type "String".  It has string kind.
type String = *_String
type _String struct{ x string }

// StructField matches the IPLD Schema type "StructField".  It has Struct type-kind, and may be interrogated like map kind.
type StructField = *_StructField
type _StructField struct {
	typ      _TypeNameOrInlineDefn
	optional _Bool
	nullable _Bool
}

// StructRepresentation matches the IPLD Schema type "StructRepresentation".
// StructRepresentation has Union typekind, which means its data model behaviors are that of a map kind.
type StructRepresentation = *_StructRepresentation
type _StructRepresentation struct {
	tag uint
	x1  _StructRepresentation_Map
	x2  _StructRepresentation_Tuple
	x3  _StructRepresentation_Stringpairs
	x4  _StructRepresentation_Stringjoin
	x5  _StructRepresentation_Listpairs
}
type _StructRepresentation__iface interface {
	_StructRepresentation__member()
}

func (_StructRepresentation_Map) _StructRepresentation__member()         {}
func (_StructRepresentation_Tuple) _StructRepresentation__member()       {}
func (_StructRepresentation_Stringpairs) _StructRepresentation__member() {}
func (_StructRepresentation_Stringjoin) _StructRepresentation__member()  {}
func (_StructRepresentation_Listpairs) _StructRepresentation__member()   {}

// StructRepresentation_Listpairs matches the IPLD Schema type "StructRepresentation_Listpairs".  It has Struct type-kind, and may be interrogated like map kind.
type StructRepresentation_Listpairs = *_StructRepresentation_Listpairs
type _StructRepresentation_Listpairs struct {
}

// StructRepresentation_Map matches the IPLD Schema type "StructRepresentation_Map".  It has Struct type-kind, and may be interrogated like map kind.
type StructRepresentation_Map = *_StructRepresentation_Map
type _StructRepresentation_Map struct {
	fields _Map__FieldName__StructRepresentation_Map_FieldDetails__Maybe
}

// StructRepresentation_Map_FieldDetails matches the IPLD Schema type "StructRepresentation_Map_FieldDetails".  It has Struct type-kind, and may be interrogated like map kind.
type StructRepresentation_Map_FieldDetails = *_StructRepresentation_Map_FieldDetails
type _StructRepresentation_Map_FieldDetails struct {
	rename   _String__Maybe
	implicit _AnyScalar__Maybe
}

// StructRepresentation_Stringjoin matches the IPLD Schema type "StructRepresentation_Stringjoin".  It has Struct type-kind, and may be interrogated like map kind.
type StructRepresentation_Stringjoin = *_StructRepresentation_Stringjoin
type _StructRepresentation_Stringjoin struct {
	join       _String
	fieldOrder _List__FieldName__Maybe
}

// StructRepresentation_Stringpairs matches the IPLD Schema type "StructRepresentation_Stringpairs".  It has Struct type-kind, and may be interrogated like map kind.
type StructRepresentation_Stringpairs = *_StructRepresentation_Stringpairs
type _StructRepresentation_Stringpairs struct {
	innerDelim _String
	entryDelim _String
}

// StructRepresentation_Tuple matches the IPLD Schema type "StructRepresentation_Tuple".  It has Struct type-kind, and may be interrogated like map kind.
type StructRepresentation_Tuple = *_StructRepresentation_Tuple
type _StructRepresentation_Tuple struct {
	fieldOrder _List__FieldName__Maybe
}

// TypeBool matches the IPLD Schema type "TypeBool".  It has Struct type-kind, and may be interrogated like map kind.
type TypeBool = *_TypeBool
type _TypeBool struct {
}

// TypeBytes matches the IPLD Schema type "TypeBytes".  It has Struct type-kind, and may be interrogated like map kind.
type TypeBytes = *_TypeBytes
type _TypeBytes struct {
}

// TypeCopy matches the IPLD Schema type "TypeCopy".  It has Struct type-kind, and may be interrogated like map kind.
type TypeCopy = *_TypeCopy
type _TypeCopy struct {
	fromType _TypeName
}

// TypeDefn matches the IPLD Schema type "TypeDefn".
// TypeDefn has Union typekind, which means its data model behaviors are that of a map kind.
type TypeDefn = *_TypeDefn
type _TypeDefn struct {
	tag uint
	x1  _TypeBool
	x2  _TypeString
	x3  _TypeBytes
	x4  _TypeInt
	x5  _TypeFloat
	x6  _TypeMap
	x7  _TypeList
	x8  _TypeLink
	x9  _TypeUnion
	x10 _TypeStruct
	x11 _TypeEnum
	x12 _TypeCopy
}
type _TypeDefn__iface interface {
	_TypeDefn__member()
}

func (_TypeBool) _TypeDefn__member()   {}
func (_TypeString) _TypeDefn__member() {}
func (_TypeBytes) _TypeDefn__member()  {}
func (_TypeInt) _TypeDefn__member()    {}
func (_TypeFloat) _TypeDefn__member()  {}
func (_TypeMap) _TypeDefn__member()    {}
func (_TypeList) _TypeDefn__member()   {}
func (_TypeLink) _TypeDefn__member()   {}
func (_TypeUnion) _TypeDefn__member()  {}
func (_TypeStruct) _TypeDefn__member() {}
func (_TypeEnum) _TypeDefn__member()   {}
func (_TypeCopy) _TypeDefn__member()   {}

// TypeDefnInline matches the IPLD Schema type "TypeDefnInline".
// TypeDefnInline has Union typekind, which means its data model behaviors are that of a map kind.
type TypeDefnInline = *_TypeDefnInline
type _TypeDefnInline struct {
	x _TypeDefnInline__iface
}
type _TypeDefnInline__iface interface {
	_TypeDefnInline__member()
}

func (_TypeMap) _TypeDefnInline__member()  {}
func (_TypeList) _TypeDefnInline__member() {}

// TypeEnum matches the IPLD Schema type "TypeEnum".  It has Struct type-kind, and may be interrogated like map kind.
type TypeEnum = *_TypeEnum
type _TypeEnum struct {
	members        _Map__EnumValue__Unit
	representation _EnumRepresentation
}

// TypeFloat matches the IPLD Schema type "TypeFloat".  It has Struct type-kind, and may be interrogated like map kind.
type TypeFloat = *_TypeFloat
type _TypeFloat struct {
}

// TypeInt matches the IPLD Schema type "TypeInt".  It has Struct type-kind, and may be interrogated like map kind.
type TypeInt = *_TypeInt
type _TypeInt struct {
}

// TypeLink matches the IPLD Schema type "TypeLink".  It has Struct type-kind, and may be interrogated like map kind.
type TypeLink = *_TypeLink
type _TypeLink struct {
	expectedType _TypeName__Maybe
}

// TypeList matches the IPLD Schema type "TypeList".  It has Struct type-kind, and may be interrogated like map kind.
type TypeList = *_TypeList
type _TypeList struct {
	valueType      _TypeNameOrInlineDefn
	valueNullable  _Bool
	representation _ListRepresentation
}

// TypeMap matches the IPLD Schema type "TypeMap".  It has Struct type-kind, and may be interrogated like map kind.
type TypeMap = *_TypeMap
type _TypeMap struct {
	keyType        _TypeName
	valueType      _TypeNameOrInlineDefn
	valueNullable  _Bool
	representation _MapRepresentation
}

// TypeName matches the IPLD Schema type "TypeName".  It has string kind.
type TypeName = *_TypeName
type _TypeName struct{ x string }

// TypeNameOrInlineDefn matches the IPLD Schema type "TypeNameOrInlineDefn".
// TypeNameOrInlineDefn has Union typekind, which means its data model behaviors are that of a map kind.
type TypeNameOrInlineDefn = *_TypeNameOrInlineDefn
type _TypeNameOrInlineDefn struct {
	tag uint
	x1  _TypeName
	x2  _TypeDefnInline
}
type _TypeNameOrInlineDefn__iface interface {
	_TypeNameOrInlineDefn__member()
}

func (_TypeName) _TypeNameOrInlineDefn__member()       {}
func (_TypeDefnInline) _TypeNameOrInlineDefn__member() {}

// TypeString matches the IPLD Schema type "TypeString".  It has Struct type-kind, and may be interrogated like map kind.
type TypeString = *_TypeString
type _TypeString struct {
}

// TypeStruct matches the IPLD Schema type "TypeStruct".  It has Struct type-kind, and may be interrogated like map kind.
type TypeStruct = *_TypeStruct
type _TypeStruct struct {
	fields         _Map__FieldName__StructField
	representation _StructRepresentation
}

// TypeUnion matches the IPLD Schema type "TypeUnion".  It has Struct type-kind, and may be interrogated like map kind.
type TypeUnion = *_TypeUnion
type _TypeUnion struct {
	members        _List__TypeName
	representation _UnionRepresentation
}

// UnionRepresentation matches the IPLD Schema type "UnionRepresentation".
// UnionRepresentation has Union typekind, which means its data model behaviors are that of a map kind.
type UnionRepresentation = *_UnionRepresentation
type _UnionRepresentation struct {
	tag uint
	x1  _UnionRepresentation_Kinded
	x2  _UnionRepresentation_Keyed
	x3  _UnionRepresentation_Envelope
	x4  _UnionRepresentation_Inline
	x5  _UnionRepresentation_StringPrefix
	x6  _UnionRepresentation_BytePrefix
}
type _UnionRepresentation__iface interface {
	_UnionRepresentation__member()
}

func (_UnionRepresentation_Kinded) _UnionRepresentation__member()       {}
func (_UnionRepresentation_Keyed) _UnionRepresentation__member()        {}
func (_UnionRepresentation_Envelope) _UnionRepresentation__member()     {}
func (_UnionRepresentation_Inline) _UnionRepresentation__member()       {}
func (_UnionRepresentation_StringPrefix) _UnionRepresentation__member() {}
func (_UnionRepresentation_BytePrefix) _UnionRepresentation__member()   {}

// UnionRepresentation_BytePrefix matches the IPLD Schema type "UnionRepresentation_BytePrefix".  It has Struct type-kind, and may be interrogated like map kind.
type UnionRepresentation_BytePrefix = *_UnionRepresentation_BytePrefix
type _UnionRepresentation_BytePrefix struct {
	discriminantTable _Map__TypeName__Int
}

// UnionRepresentation_Envelope matches the IPLD Schema type "UnionRepresentation_Envelope".  It has Struct type-kind, and may be interrogated like map kind.
type UnionRepresentation_Envelope = *_UnionRepresentation_Envelope
type _UnionRepresentation_Envelope struct {
	discriminantKey   _String
	contentKey        _String
	discriminantTable _Map__String__TypeName
}

// UnionRepresentation_Inline matches the IPLD Schema type "UnionRepresentation_Inline".  It has Struct type-kind, and may be interrogated like map kind.
type UnionRepresentation_Inline = *_UnionRepresentation_Inline
type _UnionRepresentation_Inline struct {
	discriminantKey   _String
	discriminantTable _Map__String__TypeName
}

// UnionRepresentation_Keyed matches the IPLD Schema type "UnionRepresentation_Keyed".  It has map kind.
type UnionRepresentation_Keyed = *_UnionRepresentation_Keyed
type _UnionRepresentation_Keyed struct {
	m map[_String]*_TypeName
	t []_UnionRepresentation_Keyed__entry
}
type _UnionRepresentation_Keyed__entry struct {
	k _String
	v _TypeName
}

// UnionRepresentation_Kinded matches the IPLD Schema type "UnionRepresentation_Kinded".  It has map kind.
type UnionRepresentation_Kinded = *_UnionRepresentation_Kinded
type _UnionRepresentation_Kinded struct {
	m map[_RepresentationKind]*_TypeName
	t []_UnionRepresentation_Kinded__entry
}
type _UnionRepresentation_Kinded__entry struct {
	k _RepresentationKind
	v _TypeName
}

// UnionRepresentation_StringPrefix matches the IPLD Schema type "UnionRepresentation_StringPrefix".  It has Struct type-kind, and may be interrogated like map kind.
type UnionRepresentation_StringPrefix = *_UnionRepresentation_StringPrefix
type _UnionRepresentation_StringPrefix struct {
	discriminantTable _Map__String__TypeName
}

// Unit matches the IPLD Schema type "Unit".  It has Struct type-kind, and may be interrogated like map kind.
type Unit = *_Unit
type _Unit struct {
}
